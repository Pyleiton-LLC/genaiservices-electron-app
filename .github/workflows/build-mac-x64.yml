name: Build x64 macOS Installer 
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: macos-13
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      # Import and set up the signing certificate
      - name: Import Signing Certificate
        env:
          CERTIFICATE_B64: ${{ secrets.SIGNING_CERT }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          KEYCHAIN_PATH: "${{ runner.temp }}/app-signing.keychain-db"
          KEYCHAIN_PASSWORD: "temporary-password"
        run: |
          echo "Setting up keychain..."
          # Create the keychain
          security create-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security set-keychain-settings -lut 21600 "${KEYCHAIN_PATH}"
          security unlock-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          
          # Add keychain to search list and make it default
          security list-keychains -d user -s "${KEYCHAIN_PATH}" $(security list-keychains -d user | sed s/\"//g)
          security default-keychain -s "${KEYCHAIN_PATH}"
          
          # Create certificate file
          echo "Decoding certificate..."
          echo "${CERTIFICATE_B64}" | base64 --decode > "${{ runner.temp }}/certificate.p12"
          
          # Import certificate
          echo "Importing certificate..."
          security import "${{ runner.temp }}/certificate.p12" -P "${CERTIFICATE_PASSWORD}" -A -t cert -f pkcs12 -k "${KEYCHAIN_PATH}"
          
          # Allow codesign to access the certificate without UI interaction
          echo "Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          
          # Clean up the temporary certificate file
          rm "${{ runner.temp }}/certificate.p12"
          
          # Print available code signing identities
          echo "Available code signing identities:"
          security find-identity -p codesigning "${KEYCHAIN_PATH}"
       
      - name: Install dependencies
        run: npm install
        working-directory: genaiservices-electron-app
        
      - name: Build the Electron app
        run: npm run build-mac
        working-directory: genaiservices-electron-app
        
      - name: Sign DMG
        env:
          KEYCHAIN_PATH: "${{ runner.temp }}/app-signing.keychain-db"
          KEYCHAIN_PASSWORD: "temporary-password"
        run: |
          # Unlock the keychain again before signing
          security unlock-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          
          # Get ALL code signing identities, including untrusted ones
          # We'll extract the certificate hash and the certificate name
          CERT_INFO=$(security find-identity -p codesigning "${KEYCHAIN_PATH}" | grep -v "valid identities found" | head -1)
          
          # Extract just the hash (SHA-1 fingerprint)
          IDENTITY=$(echo "${CERT_INFO}" | awk '{print $2}')
          
          # Extract the name (in quotes)
          CERT_NAME=$(echo "${CERT_INFO}" | awk -F'"' '{print $2}')
          
          echo "Certificate info: ${CERT_INFO}"
          echo "Identity hash: ${IDENTITY}"
          echo "Certificate name: ${CERT_NAME}"
          
          if [ -z "${IDENTITY}" ]; then
            echo "ERROR: Could not find any code signing identity"
            exit 1
          fi
          
          # Find the DMG file(s)
          DMG_FILES=$(find genaiservices-electron-app/dist/prod -name "*.dmg" -type f)
          
          # Make sure DMG files exist
          if [ -z "${DMG_FILES}" ]; then
            echo "ERROR: No DMG files found to sign"
            exit 1
          fi
          
          # Sign each DMG file - try with identity hash first, then with name if that fails
          for DMG_FILE in ${DMG_FILES}; do
            echo "Signing DMG with identity hash: ${DMG_FILE}"
            if codesign --force --sign "${IDENTITY}" --keychain "${KEYCHAIN_PATH}" --timestamp --verbose "${DMG_FILE}"; then
              echo "Successfully signed with identity hash"
            else
              echo "Trying to sign with certificate name instead"
              codesign --force --sign "${CERT_NAME}" --keychain "${KEYCHAIN_PATH}" --timestamp --verbose "${DMG_FILE}" || {
                echo "ERROR: Both signing methods failed"
                exit 1
              }
            fi
            
            # Verify the signature (but don't fail if verification fails)
            echo "Verifying signature for: ${DMG_FILE}"
            codesign -vvv --deep --strict "${DMG_FILE}" || echo "Verification failed but continuing"
          done
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac-prod-build-x64
          path: genaiservices-electron-app/dist/prod
