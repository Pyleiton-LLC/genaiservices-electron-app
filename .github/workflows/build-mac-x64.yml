name: Build x64 macOS Installer 
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: macos-13
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      # Debug the certificate first
      - name: Debug Certificate Import
        env:
          CERTIFICATE_B64: ${{ secrets.SIGNING_CERT }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          KEYCHAIN_PATH: "${{ runner.temp }}/app-signing.keychain-db"
          KEYCHAIN_PASSWORD: "temporary-password"
        run: |
          # Create and set up keychain
          security create-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security set-keychain-settings -lut 21600 "${KEYCHAIN_PATH}"
          security unlock-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security default-keychain -s "${KEYCHAIN_PATH}"
          
          # Add keychain to search list
          security list-keychains -d user -s "${KEYCHAIN_PATH}" $(security list-keychains -d user | sed s/\"//g)
          
          # Decode certificate
          echo "${CERTIFICATE_B64}" | base64 --decode > "${{ runner.temp }}/certificate.p12"
          
          echo "Certificate file details:"
          ls -la "${{ runner.temp }}/certificate.p12"
          file "${{ runner.temp }}/certificate.p12"
          
          # Import certificate
          echo "Importing certificate..."
          security import "${{ runner.temp }}/certificate.p12" -P "${CERTIFICATE_PASSWORD}" -A -t cert -f pkcs12 -k "${KEYCHAIN_PATH}"
          
          # Allow codesign to access the certificate without UI interaction
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          
          echo "Certificate imported. Checking all types of certificates in keychain:"
          
          # Check all certificates in the keychain - this might show the Subject and Key Usage
          security find-certificate -a "${KEYCHAIN_PATH}" | grep -A 5 "alis"
          
          # Try to dump all certificates for inspection
          echo "Trying to dump certificate details with openssl:"
          security find-certificate -a -p "${KEYCHAIN_PATH}" | openssl x509 -text -noout || echo "Failed to parse certificate with OpenSSL"
          
          # Check explicitly for code signing identities
          echo "Checking for code signing certificates:"
          security find-identity -p codesigning "${KEYCHAIN_PATH}"
          
          # Check all identities 
          echo "All identities in keychain:"
          security find-identity -v "${KEYCHAIN_PATH}"
       
      - name: Install dependencies
        run: npm install
        working-directory: genaiservices-electron-app
        
      - name: Build the Electron app
        run: npm run build-mac
        working-directory: genaiservices-electron-app
        
      - name: Sign DMG with Direct Certificate Reference
        env:
          KEYCHAIN_PATH: "${{ runner.temp }}/app-signing.keychain-db"
          KEYCHAIN_PASSWORD: "temporary-password"
        run: |
          # Unlock keychain
          security unlock-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          
          # Try to get any certificate common name from the keychain
          CERT_NAME=$(security find-certificate -a "${KEYCHAIN_PATH}" | grep -A1 "alis" | grep -v "alis" | head -1 | sed 's/^[ ]*"//g' | sed 's/"[ ]*$//g')
          
          echo "Found certificate name: ${CERT_NAME}"
          
          # Find the DMG file(s)
          DMG_FILES=$(find genaiservices-electron-app/dist/prod -name "*.dmg" -type f)
          
          # Try signing with the certificate name directly
          if [ -n "${CERT_NAME}" ]; then
            for DMG_FILE in ${DMG_FILES}; do
              echo "Signing DMG with certificate name: ${DMG_FILE}"
              codesign --force --sign "${CERT_NAME}" --keychain "${KEYCHAIN_PATH}" --timestamp --verbose "${DMG_FILE}" || {
                echo "Signing failed with cert name, trying ad-hoc signing instead"
                codesign --force --sign "-" --timestamp --verbose "${DMG_FILE}"
              }
            done
          else
            # Fall back to ad-hoc signing
            echo "No certificate name found, using ad-hoc signing"
            for DMG_FILE in ${DMG_FILES}; do
              echo "Ad-hoc signing DMG: ${DMG_FILE}"
              codesign --force --sign "-" --timestamp --verbose "${DMG_FILE}"
            done
          fi
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac-prod-build-x64
          path: genaiservices-electron-app/dist/prod
